spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://postgres:5432/postgres



spring.jpa.properties.hibernate.transaction.jta.platform=org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.show_sql=false

spring.jpa.hibernate.ddl-auto=update
spring.jpa.generate-ddl=true
spring.jpa.open-in-view=true

spring.devtools.add-properties=true

springdoc.api-docs.enabled=true
springdoc.api-docs.groups.enabled=true
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=true


# springdoc.group-configs[0].display-name=todos
springdoc.group-configs[0].group=todo
springdoc.group-configs[0].packagesToScan=com.nutriasoft.todo
springdoc.group-configs[0].pathsToMatch=/todo/**

server.servlet.context-path=/api

server.port=8081

# -- SPRING SECURITY --

# El ClienteRegistro la clase contiene toda la información básica sobre el cliente. 
# La configuración automática de primavera busca propiedades con el esquema spring.security.oauth2.client.registro.[registroId] 
# y registra un cliente con OAuth 2.0 o Conexión OpenID (OIDC).
# El valor que especificamos en cliente-id coincide con el cliente que nombramos en la consola de administración.

spring.security.oauth2.client.provider.keycloak.issuer-uri=http://172.21.192.1:8080/realms/todoAppRealm
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

# La aplicación Spring Boot necesita interactuar con un proveedor OAuth 2.0 u OIDC para manejar la lógica de solicitud real para diferentes tipos de subvenciones.
# Por lo tanto, necesitamos configurar el proveedor de OIDC.
# Se puede configurar automáticamente en función de los valores de propiedad con el esquema spring.security.oauth2.client.provider.[nombre del proveedor].
spring.security.oauth2.client.registration.keycloak.provider=keycloak
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.client-id=todoAppClient
spring.security.oauth2.client.registration.keycloak.client-secret=6kAOB2MHpd7hCj0PxSofuNNNPfOaRRLs
spring.security.oauth2.client.registration.keycloak.scope=openid

# Esta propiedad identifica el URI base para el servidor de autorización. Introducimos el nombre de reino que creamos en la consola de administración de Keycloak.
# Además,podemos definir atributo de nombre de usuario como preferent_nombre de usuario para poblar nuestros controladores Principal con un usuario adecuado.
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://172.21.192.1:8080/realms/todoAppRealm
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://172.21.192.1:8080/realms/todoAppRealm/protocol/openid-connect/certs

# Logging Configuration
logging.level.org.springframework.web=debug
logging.level.org.springframework.security=debug
